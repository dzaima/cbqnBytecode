B iarrs[54];
static const i32 iarrs_data[] = {
 // 0
2, // 1
13, // 2
15, // 3
16, // 4
17, // 5
18, // 6
21, // 7
0,27, // 8
409,3, // 9
413,3, // 10
417,3, // 11
421,5, // 12
429,5, // 13
447,6, // 14
462,6, // 15
481,6, // 16
503,6, // 17
525,6, // 18
552,6, // 19
584,3, // 20
601,3, // 21
610,3, // 22
616,4, // 23
692,3, // 24
712,3, // 25
752,6, // 26
812,8, // 27
894,5, // 28
972,3, // 29
989,2, // 30
993,2, // 31
997,3, // 32
1020,3, // 33
0,1,0, // 34
0,0,1, // 35
0,0,3, // 36
1,0,4, // 37
1,0,5, // 38
2,0,6, // 39
2,0,7, // 40
2,0,8, // 41
2,0,9, // 42
2,0,10, // 43
2,0,11, // 44
0,0,12, // 45
0,0,14, // 46
1,0,19, // 47
0,0,20, // 48
1,1,22, // 49
1,1,23, // 50
0,0,24, // 51
0,0,25, // 52
1,1,33,0,0,48,6,1,2,0,13,1,3,27,33,0,1,48,6,1,4,33,0,2,48,6,1,5,33,0,3,48,6,1,6,33,0,4,48,6,1,7,33,0,5,48,6,1,8,33,0,6,48,6,1,9,33,0,7,48,6,1,10,33,0,8,48,6,1,11,33,0,9,48,6,1,12,33,0,10,48,6,32,0,3,0,6,26,33,0,11,48,6,32,0,11,0,2,0,14,21,0,13,34,0,10,27,33,0,12,48,6,0,6,0,2,0,14,21,33,0,13,48,6,0,2,0,3,32,0,11,21,0,2,32,0,1,21,0,13,0,4,27,33,0,14,48,6,0,2,0,3,0,6,21,0,2,32,0,1,21,0,13,0,2,32,0,4,32,0,14,32,0,4,0,2,27,27,27,33,0,15,48,6,0,2,32,0,0,11,2,32,0,8,0,6,32,0,6,0,15,27,27,33,0,16,48,6,0,14,0,7,0,9,0,15,21,11,2,32,0,8,0,5,32,0,12,0,15,21,27,33,0,17,48,6,1,13,0,13,1,14,27,33,0,18,48,6,1,15,33,0,19,48,6,1,16,33,0,20,48,6,1,17,33,0,21,48,6,1,18,33,0,22,48,6,1,19,33,0,23,48,6,34,0,23,33,0,24,48,6,32,0,0,0,12,1,20,1,21,11,2,32,0,8,32,0,0,32,0,4,0,5,27,0,5,0,14,21,27,27,33,0,25,48,6,34,0,25,33,0,26,48,6,34,0,14,34,0,15,34,0,16,34,0,12,34,0,13,32,0,17,34,0,11,32,0,0,32,0,1,34,0,19,34,0,18,34,0,20,32,0,21,34,0,26,32,0,2,32,0,3,34,0,22,32,0,24,34,0,4,34,0,5,32,0,6,32,0,7,32,0,8,34,0,9,11,24,7,34,0,1,7,34,0,2,7,34,0,1,7,34,0,1,6,34,0,4,7,32,0,1,32,1,1,34,0,2,19,34,0,4,34,0,1,17,7,34,0,1,34,0,5,34,0,2,19,34,0,4,16,7,34,0,1,32,0,5,16,34,0,4,34,0,2,34,0,5,18,19,7,32,0,1,34,0,5,34,0,1,32,1,1,34,0,2,19,34,0,4,16,17,7,32,0,1,34,0,5,16,34,0,4,34,0,1,32,1,1,34,0,2,19,17,7,32,0,1,1,22,34,0,5,0,9,34,0,1,34,0,4,32,0,2,19,17,26,34,0,2,19,7,32,0,1,1,23,32,1,0,34,0,4,11,2,0,9,34,0,1,34,0,5,32,0,2,19,17,26,34,0,2,19,7,32,0,1,11,1,0,8,11,0,17,0,0,34,0,1,17,7,34,0,2,34,0,1,11,2,7,34,0,1,11,1,7,32,0,2,32,1,17,16,33,0,3,48,6,32,0,1,32,1,17,16,0,1,32,0,3,17,0,10,16,0,11,34,0,2,32,1,7,0,9,27,32,1,3,34,0,1,26,0,9,32,0,3,32,1,7,0,2,27,21,11,2,32,1,8,0,6,32,1,6,34,0,3,27,27,26,16,7,34,0,2,0,10,16,0,11,34,0,1,32,1,7,0,9,27,26,16,7,32,0,2,0,2,32,0,1,32,1,17,16,17,0,10,16,0,11,32,1,2,34,0,1,26,0,9,0,1,32,1,6,34,0,2,27,21,26,16,7,32,0,1,0,8,16,33,0,5,48,6,32,0,5,32,1,17,16,0,10,16,0,11,34,0,5,32,1,7,0,9,27,34,0,4,34,0,2,0,8,16,32,1,7,0,9,27,21,26,16,0,8,34,0,1,0,7,16,17,7,32,0,1,32,1,17,16,33,0,5,48,6,34,0,4,33,0,6,48,6,32,0,1,32,1,1,0,13,1,24,27,34,0,2,19,33,0,7,48,6,32,0,5,0,10,16,0,11,32,1,2,34,0,1,26,0,9,0,2,32,1,6,0,14,0,2,32,0,5,17,27,21,1,25,20,26,16,6,32,0,7,7,32,0,1,0,7,16,32,1,21,0,14,17,33,0,3,48,32,1,24,0,3,26,0,14,17,33,0,4,48,6,32,0,4,0,10,16,0,8,34,0,3,17,0,11,32,1,2,34,0,1,0,8,16,26,0,9,0,1,21,26,34,0,2,0,11,0,3,32,1,6,34,0,4,27,26,18,19,7,34,0,2,0,11,34,0,1,32,1,7,0,9,27,26,16,7,34,0,1,7,34,0,1,7,0,14,0,2,32,1,5,17,33,1,5,49,6,34,0,1,0,9,32,1,5,17,7,32,1,7,32,1,6,34,0,1,17,33,1,7,49,7, // 53
};
static const u32 iarrs_lens[] = {0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1035};
init_intarrs(iarrs, iarrs_data, iarrs_lens, 54);
B iarrs0 = iarrs[0];
incByG(iarrs[0], 6);

B a0; B* a0p = m_lvBn(&a0, 16);
assume_separate_storage(a0p, iarrs);
a0p[0] = incG(provide[1]);
a0p[1] = incG(provide[6]);
a0p[2] = incG(provide[7]);
a0p[3] = incG(provide[8]);
a0p[4] = incG(provide[11]);
a0p[5] = incG(provide[12]);
a0p[6] = incG(provide[13]);
a0p[7] = incG(provide[14]);
a0p[8] = incG(provide[15]);
a0p[9] = incG(provide[16]);
a0p[10] = incG(provide[17]);
a0p[11] = incG(provide[18]);
a0p[12] = incG(provide[20]);
a0p[13] = incG(provide[21]);
a0p[14] = m_f64(1);
a0p[15] = m_f64(0);

B a1; B* a1p = m_lvBn(&a1, 26);
assume_separate_storage(a1p, iarrs);
a1p[0] = iarrs[34];
a1p[1] = iarrs[35];
a1p[3] = iarrs[36];
a1p[4] = iarrs[37];
a1p[5] = iarrs[38];
a1p[6] = iarrs[39];
a1p[7] = iarrs[40];
a1p[8] = iarrs[41];
a1p[9] = iarrs[42];
a1p[10] = iarrs[43];
a1p[11] = iarrs[44];
a1p[12] = iarrs[45];
a1p[14] = iarrs[46];
a1p[19] = iarrs[47];
a1p[20] = iarrs[48];
a1p[22] = iarrs[49];
a1p[23] = iarrs[50];
a1p[24] = iarrs[51];
a1p[25] = iarrs[52];
a1p[2] = m_blockinfo(0, iarrs0, iarrs[1]);
a1p[13] = m_blockinfo(0, iarrs0, iarrs[2]);
a1p[15] = m_blockinfo(0, iarrs0, iarrs[3]);
a1p[16] = m_blockinfo(0, iarrs0, iarrs[4]);
a1p[17] = m_blockinfo(0, iarrs0, iarrs[5]);
a1p[18] = m_blockinfo(1, iarrs0, iarrs[6]);
a1p[21] = m_blockinfo(0, iarrs0, iarrs[7]);

B a2; B* a2p = m_lvBn(&a2, 26);
assume_separate_storage(a2p, iarrs);
a2p[0] = iarrs[8];
a2p[1] = iarrs[9];
a2p[2] = iarrs[10];
a2p[3] = iarrs[11];
a2p[4] = iarrs[12];
a2p[5] = iarrs[13];
a2p[6] = iarrs[14];
a2p[7] = iarrs[15];
a2p[8] = iarrs[16];
a2p[9] = iarrs[17];
a2p[10] = iarrs[18];
a2p[11] = iarrs[19];
a2p[12] = iarrs[20];
a2p[13] = iarrs[21];
a2p[14] = iarrs[22];
a2p[15] = iarrs[23];
a2p[16] = iarrs[24];
a2p[17] = iarrs[25];
a2p[18] = iarrs[26];
a2p[19] = iarrs[27];
a2p[20] = iarrs[28];
a2p[21] = iarrs[29];
a2p[22] = iarrs[30];
a2p[23] = iarrs[31];
a2p[24] = iarrs[32];
a2p[25] = iarrs[33];
load_importBlock("(self-hosted runtime0)",
  iarrs[53],
  a0,
  a1,
  a2
);
